{
	"info": {
		"_postman_id": "48de873c-aaf3-431e-859f-13369f23497e",
		"name": "APITraining_GOREST",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "32225551"
	},
	"item": [
		{
			"name": "Get all users details",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/{{version}}/{{user_endp}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"{{version}}",
						"{{user_endp}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all users with specific name",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/{{version}}/{{user_endp}}?name=Nair",
					"host": [
						"{{host}}"
					],
					"path": [
						"{{version}}",
						"{{user_endp}}"
					],
					"query": [
						{
							"key": "name",
							"value": "Nair"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get list of users from the system",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Call should completed successfully\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains predefined number of users\", function () {\r",
							"    const users = pm.response.json();\r",
							"    pm.expect(users).to.have.length(10);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 700ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/{{version}}/{{user_endp}}?page=1",
					"host": [
						"{{host}}"
					],
					"path": [
						"{{version}}",
						"{{user_endp}}"
					],
					"query": [
						{
							"key": "page",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all users details Pagination",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/{{version}}/{{user_endp}}?page=1&per_page=30",
					"host": [
						"{{host}}"
					],
					"path": [
						"{{version}}",
						"{{user_endp}}"
					],
					"query": [
						{
							"key": "page",
							"value": "1"
						},
						{
							"key": "per_page",
							"value": "30"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Call should completed successfully\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"var userId = pm.response.json().id;\r",
							"\r",
							"pm.test(\"User id should not be empty\", function () {\r",
							"    pm.expect(userId).to.not.be.null;\r",
							"});\r",
							"\r",
							"console.log(\"Generated user email: \" + pm.response.json().email);\r",
							"pm.collectionVariables.set(\"userId\", userId);\r",
							"pm.collectionVariables.set(\"old_email\", pm.response.json().email);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"name\": \"{{name}}\",\r\n\"email\": \"{{$randomEmail}}\",\r\n\"gender\": \"{{gender}}\",\r\n\"status\": \"{{status}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/{{version}}/{{user_endp}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"{{version}}",
						"{{user_endp}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Should return user by id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const schema = {\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"id\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"email\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"gender\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"status\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"id\",\r",
							"    \"name\",\r",
							"    \"email\",\r",
							"    \"gender\",\r",
							"    \"status\"\r",
							"  ]\r",
							"};\r",
							"\r",
							"var data1 = pm.response.json();\r",
							"\r",
							"pm.test(\"Schema is valid\", function () {\r",
							"    pm.expect(tv4.validate(data1, schema)).to.be.true;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/{{version}}/{{user_endp}}/{{userId}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"{{version}}",
						"{{user_endp}}",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create user_NegativeScenario_NullData",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 422\", function () {\r",
							"    pm.response.to.have.status(422);\r",
							"});\r",
							"\r",
							"pm.test(\"No values provided for mandatory fields\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    let i=1;\r",
							"\r",
							"    jsonData.forEach(data => {\t\r",
							"        if (data.field==\"email\"){\r",
							"        pm.expect(data.message).to.eql(\"can't be blank\");\r",
							"        }\r",
							"        else if (data.field==\"name\"){\r",
							"        pm.expect(data.message).to.eql(\"can't be blank\");\r",
							"        }\r",
							"        else if (data.field==\"gender\"){\r",
							"        pm.expect(data.message).to.eql(\"can't be blank, can be male of female\");\r",
							"        }\r",
							"        else if (data.field==\"status\"){\r",
							"        pm.expect(data.message).to.eql(\"can't be blank\");\r",
							"        }\r",
							"    }); \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"name\": \"\",\r\n\"email\": \"\",\r\n\"gender\": \"\",\r\n\"status\": \"\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/{{version}}/{{user_endp}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"{{version}}",
						"{{user_endp}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get user details",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/{{version}}/{{user_endp}}/{{userId}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"{{version}}",
						"{{user_endp}}",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update user details",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body contains changed email\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"new_email\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(\"Old user email: \" + pm.collectionVariables.get(\"old_email\"));\r",
							"const new_email = pm.collectionVariables.get(\"old_email\") + pm.variables.replaceIn(\"{{$randomAbbreviation}}\");\r",
							"console.log(\"New email:\"+ new_email);\r",
							"pm.collectionVariables.set(\"new_email\", new_email);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"name\": \"{{name}}\",\r\n\"email\": \"{{new_email}}\",\r\n\"gender\": \"{{gender}}\",\r\n\"status\": \"{{statusUpdate1}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/{{version}}/{{user_endp}}/{{userId}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"{{version}}",
						"{{user_endp}}",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update user details_NegativeScenario_NoUserId",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(\"Old user email: \" + pm.collectionVariables.get(\"old_email\"));\r",
							"const new_email = pm.collectionVariables.get(\"old_email\") + pm.variables.replaceIn(\"{{$randomAbbreviation}}\");\r",
							"console.log(\"New email:\"+ new_email);\r",
							"pm.collectionVariables.set(\"new_email\", new_email);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"name\": \"{{name}}\",\r\n\"email\": \"{{new_email}}\",\r\n\"gender\": \"{{gender}}\",\r\n\"status\": \"{{statusUpdate1}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/{{version}}/{{user_endp}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"{{version}}",
						"{{user_endp}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update user details",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(\"Old user email: \" + pm.collectionVariables.get(\"old_email\"));\r",
							"const new_email = pm.collectionVariables.get(\"old_email\") + pm.variables.replaceIn(\"{{$randomAbbreviation}}\");\r",
							"console.log(\"New email:\"+ new_email);\r",
							"pm.collectionVariables.set(\"new_email\", new_email);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"name\": \"{{name}}\",\r\n\"email\": \"{{new_email}}\",\r\n\"gender\": \"{{gender}}\",\r\n\"status\": \"{{statusUpdate1}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/{{version}}/{{user_endp}}/{{userId}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"{{version}}",
						"{{user_endp}}",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create user Posts",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.collectionVariables.set(\"postId\",jsonData.id);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": " {\r\n\"title\": \"{{title}}\",\r\n\"body\": \"{{body}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/{{version}}/{{user_endp}}/{{userId}}/posts",
					"host": [
						"{{host}}"
					],
					"path": [
						"{{version}}",
						"{{user_endp}}",
						"{{userId}}",
						"posts"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create user Posts_NegativeScenario_NullData",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 422\", function () {\r",
							"    pm.response.to.have.status(422);\r",
							"});\r",
							"\r",
							"pm.test(\"No values provided for mandatory fields\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    let i=1;\r",
							"\r",
							"    jsonData.forEach(data => {\t\r",
							"        if (data.field==\"user\"){\r",
							"        pm.expect(data.message).to.eql(\"must exist\");\r",
							"        }\r",
							"        else if (data.field==\"title\"){\r",
							"        pm.expect(data.message).to.eql(\"can't be blank\");\r",
							"        }\r",
							"        else if (data.field==\"body\"){\r",
							"        pm.expect(data.message).to.eql(\"can't be blank\");\r",
							"        }\r",
							"\r",
							"    }); \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"title\": \"\",\r\n\"body\": \"\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/{{version}}/{{user_endp}}/{{userId}}/posts",
					"host": [
						"{{host}}"
					],
					"path": [
						"{{version}}",
						"{{user_endp}}",
						"{{userId}}",
						"posts"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get user Posts",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/{{version}}/{{user_endp}}/{{userId}}/posts",
					"host": [
						"{{host}}"
					],
					"path": [
						"{{version}}",
						"{{user_endp}}",
						"{{userId}}",
						"posts"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create posts Comments",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.collectionVariables.set(\"commentsId\",jsonData.id);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "79ecb8b6afd0300ddc71d6b48254d64fe94f4b9c2ff092ae621b880f4f8d36e7",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"{{name}}\",\r\n    \"email\": \"{{new_email}}\",\r\n    \"body\": \"{{body}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/{{version}}/posts/{{postId}}/comments",
					"host": [
						"{{host}}"
					],
					"path": [
						"{{version}}",
						"posts",
						"{{postId}}",
						"comments"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create posts Comments_NegativeScenario_NoUserId",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 422\", function () {\r",
							"    pm.response.to.have.status(422);\r",
							"});\r",
							"\r",
							"pm.test(\"No values provided for mandatory fields\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    let i=1;\r",
							"\r",
							"    jsonData.forEach(data => {\t\r",
							"        if (data.field==\"post\"){\r",
							"        pm.expect(data.message).to.eql(\"must exist\");\r",
							"        }\r",
							"        else if (data.field==\"name\"){\r",
							"        pm.expect(data.message).to.eql(\"can't be blank\");\r",
							"        }\r",
							"        else if (data.field==\"email\"){\r",
							"        pm.expect(data.message).to.eql(\"can't be blank, is invalid\");\r",
							"        }\r",
							"        else if (data.field==\"body\"){\r",
							"        pm.expect(data.message).to.eql(\"can't be blank\");\r",
							"        }\r",
							"\r",
							"    }); \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "79ecb8b6afd0300ddc71d6b48254d64fe94f4b9c2ff092ae621b880f4f8d36e7",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"\",\r\n    \"email\": \"\",\r\n    \"body\": \"\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/{{version}}/posts/{{postId}}/comments",
					"host": [
						"{{host}}"
					],
					"path": [
						"{{version}}",
						"posts",
						"{{postId}}",
						"comments"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get posts Comments",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/{{version}}/posts/{{postId}}/comments",
					"host": [
						"{{host}}"
					],
					"path": [
						"{{version}}",
						"posts",
						"{{postId}}",
						"comments"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create user Todos",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.collectionVariables.set(\"todosId\",jsonData.id);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "79ecb8b6afd0300ddc71d6b48254d64fe94f4b9c2ff092ae621b880f4f8d36e7",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": " {\r\n\"title\": \"{{title}}\",\r\n\"status\": \"{{statusTodos}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/{{version}}/{{user_endp}}/{{userId}}/todos",
					"host": [
						"{{host}}"
					],
					"path": [
						"{{version}}",
						"{{user_endp}}",
						"{{userId}}",
						"todos"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create user Todos_NegativeScenario_NoUserId",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 422\", function () {\r",
							"    pm.response.to.have.status(422);\r",
							"});\r",
							"\r",
							"pm.test(\"No values provided for mandatory fields\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    let i=1;\r",
							"\r",
							"    jsonData.forEach(data => {\t\r",
							"        if (data.field==\"user\"){\r",
							"        pm.expect(data.message).to.eql(\"must exist\");\r",
							"        }\r",
							"        else if (data.field==\"title\"){\r",
							"        pm.expect(data.message).to.eql(\"can't be blank\");\r",
							"        }\r",
							"        else if (data.field==\"status\"){\r",
							"        pm.expect(data.message).to.eql(\"can't be blank, can be pending or completed\");\r",
							"        }\r",
							"    }); \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "79ecb8b6afd0300ddc71d6b48254d64fe94f4b9c2ff092ae621b880f4f8d36e7",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": " {\r\n\"title\": \"\",\r\n\"status\": \"\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/{{version}}/{{user_endp}}/{{userId}}/todos",
					"host": [
						"{{host}}"
					],
					"path": [
						"{{version}}",
						"{{user_endp}}",
						"{{userId}}",
						"todos"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get user Todos",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/{{version}}/{{user_endp}}/{{userId}}/todos",
					"host": [
						"{{host}}"
					],
					"path": [
						"{{version}}",
						"{{user_endp}}",
						"{{userId}}",
						"todos"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{host}}/{{version}}/{{user_endp}}/{{userId}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"{{version}}",
						"{{user_endp}}",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete user_NegativeScenario_NoUserId",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{host}}/{{version}}/{{user_endp}}/",
					"host": [
						"{{host}}"
					],
					"path": [
						"{{version}}",
						"{{user_endp}}",
						""
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "token",
			"value": "79ecb8b6afd0300ddc71d6b48254d64fe94f4b9c2ff092ae621b880f4f8d36e7",
			"type": "string"
		},
		{
			"key": "userId",
			"value": "",
			"type": "string"
		},
		{
			"key": "postId",
			"value": ""
		},
		{
			"key": "commentsId",
			"value": ""
		},
		{
			"key": "todosId",
			"value": ""
		},
		{
			"key": "old_email",
			"value": ""
		},
		{
			"key": "new_email",
			"value": ""
		}
	]
}